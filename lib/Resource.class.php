<?php

class Resource {

    const FIRST_KEY = 100;

    private static $path;

    public static function path($path = null) {
        if($path !== null) {
            $path = rtrim($path, '\\/') . DIRECTORY_SEPARATOR;
            self::$path = $path;
        }
        return self::$path;
    }

    public static function newResource($file_path) {
        $key = self::genNewKey();

        $dir = self::$path . $key . DIRECTORY_SEPARATOR;
        if(file_exists($dir))
        {
            throw new Exception(sprintf('Key conflict can\'t create resource'));
        }

        mkdir($dir);

        $resource_dir = $dir . 'resource';
        mkdir($resource_dir);

        $filename = basename($file_path);
        rename($file_path, $resource_dir . DIRECTORY_SEPARATOR . $filename);

        return new Resource($key, $filename);
    }

    public static function findResource($key) {

        $resource_dir = self::$path . $key . DIRECTORY_SEPARATOR . 'resource' . DIRECTORY_SEPARATOR;

        if(file_exists($resource_dir)) {
            $files = glob($resource_dir . '*');
            if(!$files || (count($files) != 1)) {
                throw new Exception('Could not find resource file for key: %s', $key);
            }
            $file = $files[0];

            return new Resource($key, basename($file));
        }

        return null;
    }

    protected static function genNewKey() {
        $key_file = self::$path . 'next_key.txt';
        if(!file_exists($key_file)) {
            $data = self::FIRST_KEY."\n\n";
            $data .= '#   AUTOMATICALLY CREATED FILE'."\n";
            $data .= '#     DO NOT EDIT THIS FILE !'."\n";
            $data .= '# next key must be on first line'."\n";
            file_put_contents($key_file, $data);
        }

        $values = file($key_file, FILE_IGNORE_NEW_LINES);
        $use_key = $values[0];
        $new_key = base_convert($use_key,36,10);
        $new_key++;
        $new_key = base_convert($new_key,10,36);
        $values[0] = $new_key;
        file_put_contents($key_file, implode("\n", $values));

        return $new_key;
    }

    private $key;
    private $filename;

    private function __construct($key, $filename) {
        $this->key = $key;
        $this->filename = $filename;
    }

    public function getKey() {
        return $this->key;
    }

    public function getName() {
        return $this->filename;
    }

    public function echo_raw() {
        $fp = fopen($this->getFilePath(), 'r');
        if($fp)
        {
            fpassthru($fp);
            fclose($fp);
        }
        else
        {
            throw new Exception('Error opening resource');
        }
    }

    protected function getFilePath() {
        return self::$path . $this->key . DIRECTORY_SEPARATOR . 'resource' . DIRECTORY_SEPARATOR . $this->filename;
    }

}